Front,Back,Topic,Difficulty,Created
"What is the time complexity of insertion sort in best, average, and worst cases?","Best: O(n) when array is already sorted
Average: O(n²)
Worst: O(n²) when array is reverse sorted
Space: O(1) auxiliary",Sorting Algorithms,Medium,2025-09-05T19:54:39.882776
Describe the insertion sort algorithm and when it's most effective.,"Works like sorting playing cards. For each element, find correct position in sorted portion and insert.
Most effective for: small arrays (n < 50), nearly sorted arrays, online algorithms (can sort as data arrives)",Sorting Algorithms,Medium,2025-09-05T19:54:39.882799
What is the recurrence relation for merge sort and its solution?,"T(n) = 2T(n/2) + Θ(n)
Solution: T(n) = Θ(n log n) by Master Theorem (Case 2)
Divide array in half, recursively sort, then merge in linear time",Sorting Algorithms,Medium,2025-09-05T19:54:39.882801
What are the advantages and disadvantages of merge sort?,"Advantages: Stable sort, guaranteed O(n log n), good for external sorting, parallelizable
Disadvantages: O(n) extra space, not in-place, slower than quicksort in practice for small arrays",Sorting Algorithms,Medium,2025-09-05T19:54:39.882802
How does the BUILD-MAX-HEAP operation achieve O(n) time complexity?,"Calls MAX-HEAPIFY on nodes n/2 down to 1. Most nodes are leaves (no work), higher levels do more work but fewer nodes.
Analysis: Σ(h=0 to lg n) ⌈n/2^(h+1)⌉ * O(h) = O(n)",Sorting Algorithms,Hard,2025-09-05T19:54:39.882804
Compare heapsort with quicksort and merge sort.,"Heapsort: O(n log n) guaranteed, O(1) space, not stable, poor cache performance
Quicksort: O(n log n) average, O(1) space, not stable, good cache performance
Merge sort: O(n log n) guaranteed, O(n) space, stable, good for external sorting",Sorting Algorithms,Medium,2025-09-05T19:54:39.882805
Why is randomized quicksort's expected time O(n log n)?,"Expected depth is O(log n) because random pivot likely creates balanced partitions.
E[T(n)] = E[partitioning cost] + E[recursive calls]
With high probability, each level processes O(n) elements, total O(n log n)",Sorting Algorithms,Hard,2025-09-05T19:54:39.882806
What is the role of the PARTITION subroutine in quicksort?,"Rearranges subarray A[p..r] so pivot element is in final position.
All elements ≤ pivot are to its left, all elements ≥ pivot are to its right.
Returns pivot's final index. Time: Θ(n), Space: O(1)",Sorting Algorithms,Medium,2025-09-05T19:54:39.882807
Under what conditions can counting sort achieve O(n + k) time?,"When input consists of integers in range [0, k] where k = O(n).
Uses auxiliary array of size k to count occurrences.
Stable: maintains relative order of equal elements
Not comparison-based, so bypasses Ω(n log n) lower bound",Sorting Algorithms,Medium,2025-09-05T19:54:39.882808
How does radix sort achieve linear time for integers?,"Sorts d-digit numbers by sorting on each digit (least to most significant).
Uses stable sorting (like counting sort) for each digit.
Time: O(d(n + k)) where d = number of digits, k = range of each digit
For fixed-width integers, d is constant → O(n)",Sorting Algorithms,Medium,2025-09-05T19:54:39.882809
When is bucket sort most effective and what is its expected time?,"Most effective when input is uniformly distributed over [0, 1).
Divides interval into n buckets, sort each bucket individually.
Expected time: O(n) when input is uniform
Worst case: O(n²) when all elements go to same bucket",Sorting Algorithms,Medium,2025-09-05T19:54:39.882811
How can you implement a queue using two stacks?,"Use two stacks: inbox and outbox.
Enqueue: push to inbox
Dequeue: if outbox empty, pop all from inbox to outbox; then pop from outbox
Amortized O(1) per operation because each element moved at most twice",Data Structures,Medium,2025-09-05T19:54:39.882832
What are the advantages of doubly linked lists over singly linked lists?,"Can traverse in both directions
O(1) deletion given node pointer (vs O(n) for singly linked)
Easier implementation of certain algorithms
Disadvantage: Extra space for previous pointers",Data Structures,Medium,2025-09-05T19:54:39.882834
Compare chaining vs open addressing for collision resolution in hash tables.,"Chaining: Store collisions in linked lists. Simple, handles high load factors well.
Open addressing: Store all elements in table using probing. Better cache performance, more sensitive to load factor.
Both achieve O(1) average time with good hash function",Data Structures,Medium,2025-09-05T19:54:39.882835
What is the load factor in hash tables and why does it matter?,"Load factor α = n/m (elements/table size)
Chaining: Expected chain length is α, operations take O(1 + α)
Open addressing: As α approaches 1, probe sequences get longer
Typical threshold: rehash when α > 0.7-0.75",Data Structures,Medium,2025-09-05T19:54:39.882836
What property makes binary search tree operations efficient?,"BST property: for any node x, all nodes in left subtree ≤ x.key ≤ all nodes in right subtree
Allows elimination of half the search space at each step
Inorder traversal visits keys in sorted order
Height determines operation complexity",Data Structures,Medium,2025-09-05T19:54:39.882837
How do you delete a node with two children from a BST?,"Replace node with its inorder successor (or predecessor)
1. Find successor: leftmost node in right subtree
2. Copy successor's key to node being deleted
3. Delete successor (which has at most one child)
Maintains BST property",Data Structures,Medium,2025-09-05T19:54:39.882838
Why do red-black tree properties guarantee O(log n) height?,"Key insight: longest path (root to leaf) has ≤ 2× nodes as shortest path
Property 4 (red nodes have black children) means no two consecutive red nodes
Property 5 (same black height) means shortest path is all black
Therefore height ≤ 2 log(n+1)",Data Structures,Hard,2025-09-05T19:54:39.882839
When do you need to recolor vs rotate in red-black tree insertion?,"After inserting red node, if parent is also red:
Case 1: Uncle is red → recolor parent, uncle to black, grandparent to red
Case 2/3: Uncle is black → rotate to balance tree
Continue up tree until root or no red-red violation",Data Structures,Hard,2025-09-05T19:54:39.882840
What are the three steps of the divide-and-conquer paradigm?,"1. Divide: Split problem into smaller subproblems of same type
2. Conquer: Solve subproblems recursively (base case for small problems)
3. Combine: Merge solutions to get solution for original problem",Divide and Conquer,Medium,2025-09-05T19:54:39.882861
How do you find the maximum subarray sum using divide and conquer?,"Divide array at midpoint. Maximum subarray is either:
1. Entirely in left half (recurse)
2. Entirely in right half (recurse)
3. Crosses midpoint (find max left sum + max right sum)
Time: T(n) = 2T(n/2) + Θ(n) = Θ(n log n)",Divide and Conquer,Medium,2025-09-05T19:54:39.882863
Describe Strassen's algorithm for matrix multiplication.,"Reduces 2×2 matrix multiplication from 8 to 7 multiplications using clever additions.
Recursively applied: T(n) = 7T(n/2) + Θ(n²) = Θ(n^log₂7) ≈ Θ(n^2.807)
Better than standard Θ(n³) for large matrices, but high constant factors",Divide and Conquer,Hard,2025-09-05T19:54:39.882865
What is the closest pair problem and how is it solved with divide and conquer?,"Find two points with minimum Euclidean distance among n points.
Divide by vertical line, solve recursively for left and right halves.
Key insight: only check points within δ of dividing line (δ = min of left, right distances)
Time: O(n log n)",Divide and Conquer,Medium,2025-09-05T19:54:39.882866
What conditions must a problem satisfy to apply dynamic programming?,"1. Optimal Substructure: Optimal solution contains optimal solutions to subproblems
2. Overlapping Subproblems: Same subproblems appear multiple times in naive recursion
Without condition 2, divide-and-conquer is more appropriate",Dynamic Programming,Medium,2025-09-05T19:54:39.882884
Compare top-down (memoization) vs bottom-up dynamic programming.,"Top-down: Recursive with memoization, solves only needed subproblems, easier to code
Bottom-up: Iterative, solves all subproblems, better space efficiency, avoids recursion overhead
Both have same asymptotic complexity but different constants",Dynamic Programming,Medium,2025-09-05T19:54:39.882886
What is the optimal substructure property in the activity selection problem?,"If activity k is in optimal solution for activities i through j, then:
- Activities before k form optimal solution for activities i through k-1
- Activities after k form optimal solution for activities k+1 through j
Greedy choice: select earliest finishing activity",Dynamic Programming,Medium,2025-09-05T19:54:39.882888
How do you reconstruct the actual solution from a DP table?,"Store additional information during DP computation:
1. Keep parent pointers showing which choice led to optimal value
2. Or store the actual choices made at each step
3. Trace back from final answer to reconstruct sequence
Adds O(1) time and space per subproblem",Dynamic Programming,Medium,2025-09-05T19:54:39.882889
What is the difference between longest common subsequence and longest common substring?,"LCS: Characters can be non-contiguous. DP recurrence based on matching/skipping characters.
LCS substring: Characters must be contiguous. Can use rolling hash or suffix arrays.
LCS is more general and commonly appears in diff algorithms, bioinformatics",Dynamic Programming,Medium,2025-09-05T19:54:39.882890
Describe the coin change problem and its DP solution.,"Given coin denominations and amount, find minimum coins needed.
DP[i] = minimum coins for amount i
DP[i] = min(DP[i-coin] + 1) for all coins ≤ i
Time: O(amount × coins), Space: O(amount)",Dynamic Programming,Medium,2025-09-05T19:54:39.882891
What is the travelling salesman problem and why is DP exponential?,"Find shortest route visiting all cities exactly once.
DP state: (current city, set of visited cities)
DP[mask][i] = shortest path ending at city i having visited cities in mask
Time: O(n² × 2ⁿ), Space: O(n × 2ⁿ) - exponential in number of cities",Dynamic Programming,Hard,2025-09-05T19:54:39.882892
What is the greedy choice property and how does it differ from optimal substructure?,"Greedy choice: Locally optimal choice leads to globally optimal solution
Optimal substructure: Optimal solution contains optimal solutions to subproblems
Greedy makes choice before solving subproblems; DP considers all possibilities",Greedy Algorithms,Medium,2025-09-05T19:54:39.882912
Why does the greedy algorithm work for the fractional knapsack problem?,"Can take fractions of items, so always take highest value-to-weight ratio first.
Greedy choice: if item has highest ratio, taking maximum possible amount is optimal
Proof: Any optimal solution can be modified to take more of highest-ratio item first",Greedy Algorithms,Medium,2025-09-05T19:54:39.882914
Describe Huffman coding and why it produces optimal prefix codes.,"Bottom-up construction: merge two lowest-frequency nodes repeatedly
Greedy choice: merge lowest frequencies at each step
Optimal because any optimal code can be transformed to have same structure
Expected code length equals entropy (information theory)",Greedy Algorithms,Medium,2025-09-05T19:54:39.882915
What is the cut property in minimum spanning trees?,"For any cut (S, V-S) of graph, the minimum weight edge crossing the cut is in some MST
Prim's algorithm: grow tree by adding minimum weight edge from tree to non-tree vertices
Kruskal's algorithm: add minimum weight edges that don't create cycles",Greedy Algorithms,Medium,2025-09-05T19:54:39.882916
Why doesn't the greedy algorithm work for the 0-1 knapsack problem?,"Cannot take fractions, so highest value-to-weight ratio might not be optimal
Counterexample: capacity 10, items (weight, value): (5, 10), (4, 7), (6, 9)
Greedy by ratio takes (4,7) + (5,10) = 17, but optimal is (6,9) + (4,7) = 16... wait, that's wrong.
Actually: optimal is (5,10) + (4,7) = 17. Need better example where greedy fails.",Greedy Algorithms,Medium,2025-09-05T19:54:39.882917
Compare adjacency matrix vs adjacency list representations of graphs.,"Adjacency Matrix: Θ(V²) space, O(1) edge queries, Θ(V) to find all neighbors
Adjacency List: Θ(V + E) space, O(degree) edge queries, O(degree) to find neighbors
Matrix better for dense graphs, list better for sparse graphs",Graph Algorithms,Medium,2025-09-05T19:54:39.882935
What tree property does BFS create and what problems does it solve?,"Creates shortest-path tree from source (minimum number of edges)
Applications: shortest path in unweighted graphs, level-order traversal, bipartiteness testing
Time: O(V + E), Space: O(V) for queue and visited array",Graph Algorithms,Medium,2025-09-05T19:54:39.882937
What are the different types of edges in a DFS forest?,"Tree edges: part of DFS forest
Back edges: to ancestors (indicate cycles in undirected graphs)
Forward edges: to descendants (only in directed graphs)
Cross edges: between different subtrees
Classification helps with cycle detection, topological sorting",Graph Algorithms,Medium,2025-09-05T19:54:39.882939
How does DFS-based topological sort work and when does it fail?,"Perform DFS, add vertices to front of list when finished (decreasing finish time)
Works because if (u,v) is edge, then finish[u] > finish[v]
Fails if back edge found (indicates cycle in directed graph)
Time: O(V + E)",Graph Algorithms,Medium,2025-09-05T19:54:39.882940
Describe the two-pass algorithm for finding strongly connected components.,"1. Run DFS on G, compute finishing times
2. Run DFS on Gᵀ (transpose) in decreasing order of finishing times
3. Each DFS tree in pass 2 is one SCC
Why it works: finishing times respect SCC structure in transpose graph",Graph Algorithms,Hard,2025-09-05T19:54:39.882942
What is the relaxation operation in shortest path algorithms?,"For edge (u,v) with weight w:
if d[v] > d[u] + w:
    d[v] = d[u] + w
    π[v] = u
Improves estimate if better path found through u
All shortest-path algorithms use relaxation",Graph Algorithms,Medium,2025-09-05T19:54:39.882944
Why does Dijkstra's algorithm fail with negative edge weights?,"Greedy choice assumes shortest path to vertex won't improve once selected
Negative edges can create shorter paths through unprocessed vertices
Example: A→B (1), A→C (4), C→B (-3). Dijkstra picks B first but A→C→B is shorter
Bellman-Ford handles negative weights by relaxing all edges V-1 times",Graph Algorithms,Medium,2025-09-05T19:54:39.882945
How does Bellman-Ford detect negative-weight cycles?,"After V-1 iterations of relaxing all edges, run one more iteration
If any distance improves, negative cycle exists
Why: shortest simple path has ≤ V-1 edges, so distances shouldn't improve after V-1 iterations
Time: O(VE)",Graph Algorithms,Medium,2025-09-05T19:54:39.882946
Compare the approaches of Floyd-Warshall vs Johnson's algorithm.,"Floyd-Warshall: O(V³), works with negative edges, simple DP
Johnson's: O(V² log V + VE), better for sparse graphs, uses reweighting + Dijkstra
Johnson's reweighting: add vertex s connected to all vertices with weight 0, run Bellman-Ford from s",Graph Algorithms,Hard,2025-09-05T19:54:39.882947
State the max-flow min-cut theorem.,"The maximum flow from source to sink equals the minimum capacity of all cuts separating source and sink.
Any max flow and any min cut satisfy: flow value = cut capacity
Ford-Fulkerson finds max flow by finding augmenting paths until none exist",Network Flows,Medium,2025-09-05T19:54:39.882965
What is an augmenting path and how does it improve flow?,"Path from source to sink in residual graph with positive capacity
Residual capacity = min(residual capacities along path)
Augment: increase flow along forward edges, decrease along backward edges
Backward edges allow 'undoing' previous flow decisions",Network Flows,Medium,2025-09-05T19:54:39.882967
Compare Ford-Fulkerson with Edmonds-Karp algorithm.,"Ford-Fulkerson: Generic method, any augmenting path, O(E × |f*|) where f* is max flow
Edmonds-Karp: Uses BFS for shortest augmenting paths, O(VE²)
BFS ensures number of augmentations is O(VE), each taking O(E) time",Network Flows,Medium,2025-09-05T19:54:39.882968
How do you model bipartite matching as a max flow problem?,"Create source connected to all left vertices (capacity 1)
Create sink connected to all right vertices (capacity 1)
Original edges have capacity 1
Max flow = maximum matching size
Integer capacities guarantee integer max flow",Network Flows,Medium,2025-09-05T19:54:39.882969
How does the KMP algorithm achieve linear time string matching?,"Precomputes failure function: longest proper prefix that's also suffix
On mismatch, shifts pattern based on failure function instead of starting over
Never moves text pointer backward, each character examined at most twice
Time: O(n + m) total",String Algorithms,Medium,2025-09-05T19:54:39.882987
What information does the failure function in KMP provide?,"π[q] = length of longest proper prefix of P[1..q] that's also suffix
When mismatch at position q+1, can shift to position π[q]+1
Precomputation uses similar logic to pattern matching itself
Allows skipping redundant comparisons",String Algorithms,Medium,2025-09-05T19:54:39.882989
How does the Rabin-Karp algorithm handle hash collisions?,"Uses rolling hash for efficiency: remove leftmost character, add rightmost
Spurious hits: hash matches but strings differ
Must verify match character by character when hashes match
Expected time O(n + m), worst case O(nm) with many collisions",String Algorithms,Medium,2025-09-05T19:54:39.882990
What makes suffix trees powerful for string processing?,"Stores all suffixes in compressed trie, linear space after compression
Applications: substring search O(m), longest common substring, longest repeated substring
Construction: O(n) with Ukkonen's algorithm (complex)
Suffix arrays are simpler alternative with similar capabilities",String Algorithms,Hard,2025-09-05T19:54:39.882991
What is Euler's theorem and how is it used in RSA?,"If gcd(a,n) = 1, then a^φ(n) ≡ 1 (mod n) where φ(n) is Euler's totient function
RSA: choose p,q prime, n=pq, φ(n)=(p-1)(q-1)
Public key e, private key d where ed ≡ 1 (mod φ(n))
Decryption works because (m^e)^d ≡ m (mod n)",Number-Theoretic Algorithms,Hard,2025-09-05T19:54:39.883011
How does the Miller-Rabin primality test work?,"Based on: if n is prime and a^(n-1) ≡ 1 (mod n), then either a^d ≡ 1 (mod n) or a^(2^r × d) ≡ -1 (mod n) for some r
Write n-1 = 2^s × d where d is odd
Test multiple random witnesses, each has ≤ 1/4 probability of fooling composite n
k rounds give error probability ≤ (1/4)^k",Number-Theoretic Algorithms,Hard,2025-09-05T19:54:39.883013
What are the possible outcomes when solving a linear program?,"1. Optimal solution: finite optimum value achieved at vertex of feasible region
2. Unbounded: objective function can be made arbitrarily large/small
3. Infeasible: no point satisfies all constraints
Simplex algorithm moves between vertices to find optimum",Linear Programming,Medium,2025-09-05T19:54:39.883014
How do you determine if a point is inside a convex polygon?,"Method 1: Check if point is on same side of all edges (using cross products)
Method 2: Sum angles from point to vertices; inside if sum = 2π
Method 3: Ray casting (works for non-convex too): count intersections with polygon boundary
Time: O(n) for n vertices",Computational Geometry,Medium,2025-09-05T19:54:39.883015
What problem does a disjoint-set data structure solve efficiently?,"Maintains collection of disjoint dynamic sets, supports:
MAKE-SET(x): create singleton set
UNION(x,y): merge sets containing x and y
FIND-SET(x): return representative of set containing x
With path compression and union by rank: amortized O(α(n)) per operation",Advanced Data Structures,Medium,2025-09-05T19:54:39.883016
How does a Fibonacci heap achieve O(1) amortized decrease-key?,"Lazy approach: don't fix heap violations immediately
Decrease-key: just decrease value, cut if violates heap property
Consolidation happens during extract-min
Potential function accounts for trees and marked nodes
Key insight: each node loses at most 2 children before being cut",Advanced Data Structures,Hard,2025-09-05T19:54:39.883017
What is the current best known complexity for matrix multiplication?,"Current best is approximately O(n^2.373) by Le Gall (2014)
Strassen's algorithm: O(n^2.807)
Naive algorithm: O(n^3)
Conjecture: optimal is O(n^2) but not yet proven
Practical algorithms often use hybrid approaches",Matrix Operations,Hard,2025-09-05T19:54:39.883019
How does the Fast Fourier Transform achieve O(n log n) polynomial multiplication?,"Convert to point-value representation using roots of unity
Multiply point-values in O(n) time
Convert back using inverse FFT
Key insight: evaluation at 2n-th roots of unity can be done recursively
Divide-and-conquer: T(n) = 2T(n/2) + O(n) = O(n log n)",Polynomials and FFT,Hard,2025-09-05T19:54:39.883020
What is the difference between Prim's and Kruskal's MST algorithms?,"Prim's: Grow tree from arbitrary vertex, always add cheapest edge from tree to non-tree
Kruskal's: Sort all edges, add cheapest edges that don't create cycles
Prim's: O(E log V) with binary heap, O(E + V log V) with Fibonacci heap
Kruskal's: O(E log E) for sorting, uses Union-Find for cycle detection",Graph Algorithms,Medium,2025-09-05T19:54:39.883021
How do you find bridges in an undirected graph?,"Bridge: edge whose removal increases number of connected components
Use DFS with discovery times and low values
low[v] = minimum discovery time reachable from subtree rooted at v
Edge (u,v) is bridge if low[v] > disc[u] (v can't reach ancestor of u)
Time: O(V + E)",Graph Algorithms,Hard,2025-09-05T19:54:39.883022
What is the articulation point (cut vertex) problem?,"Articulation point: vertex whose removal increases connected components
Root is articulation point if it has > 1 child in DFS tree
Non-root v is articulation point if some child u has low[u] ≥ disc[v]
Means removing v disconnects u from ancestors of v
Time: O(V + E) with DFS",Graph Algorithms,Hard,2025-09-05T19:54:39.883023
What is the matrix chain multiplication problem?,"Find optimal parenthesization to minimize scalar multiplications
DP[i][j] = minimum multiplications for matrices Ai through Aj
DP[i][j] = min(DP[i][k] + DP[k+1][j] + pi-1*pk*pj) for k from i to j-1
Time: O(n³), Space: O(n²). Classic example of optimal substructure",Dynamic Programming,Medium,2025-09-05T19:54:39.883024
How do you solve the palindrome partitioning problem with DP?,"Find minimum cuts to partition string into palindromes
DP[i] = minimum cuts for substring s[0..i]
DP[i] = min(DP[j-1] + 1) for all j where s[j..i] is palindrome
Precompute palindrome table: P[i][j] = true if s[i..j] is palindrome
Time: O(n²)",Dynamic Programming,Medium,2025-09-05T19:54:39.883025
What is the optimal binary search tree problem?,"Given keys with search frequencies, build BST minimizing expected search cost
DP[i][j] = minimum cost for keys ki through kj
DP[i][j] = DP[i][r-1] + DP[r+1][j] + sum of frequencies from ki to kj
Try each key kr as root, take minimum
Time: O(n³)",Dynamic Programming,Hard,2025-09-05T19:54:39.883026
How does a Fenwick Tree (Binary Indexed Tree) work?,"Compact representation for prefix sums with O(log n) updates
Index i stores sum of elements from (i - lowbit(i) + 1) to i
lowbit(i) = i & (-i) gives rightmost set bit
Query: sum bits by removing lowbit, Update: add lowbit and propagate
Space: O(n), both operations O(log n)",Advanced Data Structures,Medium,2025-09-05T19:54:39.883027
What operations does a segment tree support efficiently?,"Range queries (sum, min, max) and point/range updates in O(log n)
Complete binary tree with 4n nodes for array of size n
Lazy propagation allows range updates without updating all nodes immediately
Applications: range minimum query, range sum with updates",Advanced Data Structures,Medium,2025-09-05T19:54:39.883028
How does a trie (prefix tree) optimize string operations?,"Tree where each path from root represents a string prefix
Shared prefixes stored only once, saves space
Insert/Search/Delete: O(length of string)
Applications: autocomplete, spell checker, IP routing
Space: O(ALPHABET_SIZE × N × M) worst case",Advanced Data Structures,Medium,2025-09-05T19:54:39.883029
What is external sorting and how is merge sort adapted for it?,"Sorting data that doesn't fit in memory, stored on external storage
K-way merge: divide data into sorted runs, merge k runs at a time
Minimizes I/O operations which dominate cost
Optimal k depends on available memory and I/O characteristics
Time complexity includes I/O cost",Sorting Algorithms,Medium,2025-09-05T19:54:39.883030
How does shell sort work and what is its complexity?,"Generalization of insertion sort using gap sequence
Sort elements gap positions apart, gradually reduce gap to 1
Final pass with gap=1 is regular insertion sort
Complexity depends on gap sequence: O(n^3/2) for some sequences
Practical algorithm, simple implementation",Sorting Algorithms,Medium,2025-09-05T19:54:39.883031
What is the work-span model for analyzing parallel algorithms?,"Work (T₁): total operations in sequential execution
Span (T∞): longest dependency path (critical path)
Speedup ≤ min(T₁/T∞, P) on P processors
Parallelism = T₁/T∞, ideal parallelism when T₁/T∞ >> P",Multithreaded Algorithms,Medium,2025-09-05T19:54:39.883032
How do you parallelize merge sort efficiently?,"Spawn parallel recursive calls for left and right halves
Sync before merging (merge itself can also be parallelized)
Work: O(n log n), Span: O(log³ n) with parallel merge
Parallelism: O(n log n / log³ n) = O(n / log² n)",Multithreaded Algorithms,Medium,2025-09-05T19:54:39.883033
What is a van Emde Boas tree and what does it optimize?,"Data structure for integers in universe {0, 1, ..., u-1}
Supports insert, delete, search, predecessor, successor in O(log log u)
Recursive structure: √u clusters of size √u each
Space: O(u) but often too much for practical use
Theoretically optimal for integer operations",Advanced Data Structures,Hard,2025-09-05T19:54:39.883034
How does consistent hashing solve the load balancing problem?,"Maps both keys and servers to points on a circle
Key assigned to next server clockwise on circle
Adding/removing servers affects only adjacent keys, not all keys
Achieves good load distribution with minimal remapping
Used in distributed systems like Amazon Dynamo",Advanced Data Structures,Medium,2025-09-05T19:54:39.883035
What is a suffix array and how is it constructed efficiently?,"Sorted array of all suffixes of a string
SA[i] = starting position of i-th smallest suffix
Naive: O(n² log n), DC3 algorithm: O(n)
With LCP array, supports many string operations efficiently
More space-efficient than suffix trees in practice",String Algorithms,Hard,2025-09-05T19:54:39.883036
How does the Aho-Corasick algorithm find multiple patterns simultaneously?,"Builds trie of all patterns, adds failure links for mismatches
Failure function similar to KMP but for multiple patterns
Processes text in single pass, reporting all pattern occurrences
Time: O(n + m + z) where n=text length, m=total pattern length, z=matches
Used in antivirus software, intrusion detection",String Algorithms,Hard,2025-09-05T19:54:39.883037
What is a polynomial-time reduction and why is it important?,"Problem A reduces to B if solution to B can solve A in polynomial time
If A reduces to B and B ∈ P, then A ∈ P
Used to prove NP-completeness: reduce known NP-complete problem to new problem
Transitivity of reductions allows building chains of NP-complete problems",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883039
What is the difference between NP-hard and NP-complete?,"NP-hard: at least as hard as any problem in NP (includes harder problems)
NP-complete: in NP and NP-hard (hardest problems in NP)
All NP-complete problems reduce to each other
If any NP-complete problem ∈ P, then P = NP",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883040
How does the 2-approximation algorithm for vertex cover work?,"Repeatedly find edge (u,v), add both u and v to cover, remove all edges incident to u or v
Analysis: each chosen edge must have at least one endpoint in optimal cover
We choose both endpoints, so |solution| ≤ 2|optimal|
Simple greedy algorithm with guaranteed performance bound",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883041
What is the traveling salesman problem and what approximation is possible?,"Find shortest tour visiting all cities exactly once
General TSP: no constant approximation unless P=NP
Metric TSP (triangle inequality): 2-approximation using MST
Christofides algorithm: 3/2-approximation using minimum perfect matching
Held-Karp: exact algorithm in O(n²2ⁿ) time",Advanced Design Techniques,Hard,2025-09-05T19:54:39.883042
How do you solve the maximum bipartite matching problem?,"Model as max flow: source to left vertices, right vertices to sink, all capacities 1
Alternatively, use augmenting paths directly in bipartite graph
Hopcroft-Karp algorithm: O(E√V) using shortest augmenting paths
König's theorem: max matching = min vertex cover in bipartite graphs",Network Flows,Medium,2025-09-05T19:54:39.883043
What is the minimum cost flow problem?,"Find flow of given value with minimum cost
Generalizes shortest path (flow=1) and max flow (cost=0)
Can model as linear program or use specialized algorithms
Successive shortest path: augment along minimum cost paths
Applications: transportation, assignment problems",Network Flows,Hard,2025-09-05T19:54:39.883044
How do you compute the convex hull using Graham's scan?,"Sort points by polar angle with respect to bottom-most point
Maintain stack of hull vertices, remove points that make right turns
Uses cross product to determine turn direction
Time: O(n log n) for sorting, O(n) for scanning
Handles collinear points with special care",Computational Geometry,Medium,2025-09-05T19:54:39.883045
What is the line sweep technique in computational geometry?,"Process geometric objects by sweeping line across plane
Maintain data structure of active objects intersecting sweep line
Handle events when sweep line encounters object boundaries
Applications: segment intersection, Voronoi diagrams, closest pair
Reduces 2D problem to sequence of 1D problems",Computational Geometry,Medium,2025-09-05T19:54:39.883047
How does the Boyer-Moore algorithm skip characters during string matching?,"Uses bad character rule and good suffix rule to skip positions
Bad character: when mismatch occurs, skip to align character in pattern
Good suffix: use information about matched suffix to determine skip
Worst case O(nm) but often much faster in practice, especially for large alphabets
Preprocessing time: O(m + σ) where σ is alphabet size",String Algorithms,Medium,2025-09-05T19:54:39.883048
What is amortized analysis and when is it useful?,"Analyzes average cost per operation over sequence of operations
Useful when individual operations have varying costs but average is better
Three methods: aggregate, accounting, potential
Examples: dynamic arrays, splay trees, Fibonacci heaps
Gives tighter bounds than worst-case analysis of individual operations",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883049
How does the accounting method work in amortized analysis?,"Assign amortized cost to each operation (may differ from actual cost)
Maintain credit balance: amortized - actual cost
Credit must never go negative (prepayment principle)
Total amortized cost is upper bound on total actual cost
Example: dynamic array doubling with amortized O(1) insertion",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883050
What is the difference between Las Vegas and Monte Carlo algorithms?,"Las Vegas: randomized running time, always correct (e.g., randomized quicksort)
Monte Carlo: fixed running time, possibly incorrect with small probability
One-sided error: may say 'yes' when answer is 'no' (or vice versa)
Two-sided error: may err in either direction
Can convert between types in some cases",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883051
How does randomized quickselect achieve linear expected time?,"Find k-th smallest element using random pivot
Partition around pivot, recurse on side containing k-th element
Expected size of recursive call is 3n/4 (with high probability)
T(n) = T(3n/4) + O(n) = O(n) by geometric series
Worst case still O(n²) but very unlikely",Advanced Design Techniques,Medium,2025-09-05T19:54:39.883053
What is universal hashing and why is it important?,"Family of hash functions where any two keys have small collision probability
For family H and keys x ≠ y: Pr[h(x) = h(y)] ≤ 1/m for random h ∈ H
Ensures good expected performance regardless of input
Example: h(x) = ((ax + b) mod p) mod m where p is prime, a,b random
Defends against adversarial inputs",Advanced Data Structures,Hard,2025-09-05T19:54:39.883054
How does cuckoo hashing achieve O(1) worst-case lookup time?,"Uses two hash tables and two hash functions
Each key stored in exactly one location: T1[h1(x)] or T2[h2(x)]
Insertion may require moving existing keys (cuckoo eviction)
Worst-case O(1) lookup, amortized O(1) insertion
Rehash entire table if insertion fails after too many evictions",Advanced Data Structures,Hard,2025-09-05T19:54:39.883055
What is the set cover problem and how well can it be approximated?,"Given universe U and collection S of subsets, find minimum subcollection covering U
Greedy algorithm: repeatedly choose set covering most uncovered elements
Approximation ratio: H_n ≈ ln n where n = |U|
This is optimal unless P = NP (ln n lower bound)
Applicationates: facility location, resource allocation",Advanced Design Techniques,Hard,2025-09-05T19:54:39.883056
How does the FPTAS for knapsack work?,"Fully Polynomial-Time Approximation Scheme: (1+ε)-approximation in poly(n,1/ε)
Scale and round item values to reduce number of distinct values
Run standard DP on rounded values
Error from rounding is bounded by ε fraction of optimal
Time: O(n³/ε), first FPTAS discovered",Advanced Design Techniques,Hard,2025-09-05T19:54:39.883058
What is a persistent data structure and how is it implemented?,"Preserves previous versions when modified (immutable)
Path copying: copy nodes on path from root to modified node
Fat node method: store all versions of each node
Applications: functional programming, version control, computational geometry
Space overhead typically O(log n) per update",Advanced Data Structures,Hard,2025-09-05T19:54:39.883060
How does a splay tree achieve O(log n) amortized time?,"Self-adjusting BST that moves accessed nodes toward root via splaying
Splaying: sequence of rotations (zig, zig-zig, zig-zag)
Frequently accessed nodes end up near root
Working set theorem: amortized cost depends on access locality
No worst-case guarantees but excellent practical performance",Advanced Data Structures,Hard,2025-09-05T19:54:39.883061
What is the push-relabel algorithm for maximum flow?,"Maintains preflow (flow into node ≥ flow out) and height function
Push: send flow along admissible edges (downhill)
Relabel: increase height when no admissible edges exist
Eventually converges to maximum flow
FIFO implementation: O(V³), highest-label: O(V²√E)",Network Flows,Hard,2025-09-05T19:54:39.883062
How do you find edge-disjoint paths in a network?,"Max number of edge-disjoint s-t paths equals min s-t cut capacity
Model as max flow with all edge capacities = 1
Each unit of flow corresponds to one edge-disjoint path
Vertex-disjoint paths: split each vertex (except s,t) into in and out vertices
Applications: fault tolerance, load balancing",Network Flows,Medium,2025-09-05T19:54:39.883063
